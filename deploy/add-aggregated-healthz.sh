#!/usr/bin/env bash
# –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π healthz —ç–Ω–¥–ø–æ–∏–Ω—Ç
# –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ gateway

echo "üè• –î–û–ë–ê–í–õ–Ø–ï–ú –ê–ì–†–ï–ì–ò–†–û–í–ê–ù–ù–´–ô /healthz..."

# 1. –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ gateway
cat > /tmp/gateway-healthz.js << 'EOF'
const express = require('express');
const axios = require('axios');

async function checkService(name, url, headers = {}) {
  try {
    const response = await axios.get(url, { headers, timeout: 5000 });
    return { name, status: 'ok', code: response.status };
  } catch (error) {
    return {
      name,
      status: 'error',
      code: error.response?.status || 'timeout',
      message: error.message
    };
  }
}

async function aggregatedHealthz(req, res) {
  const checks = await Promise.all([
    // Gateway self-check
    Promise.resolve({ name: 'gateway', status: 'ok', code: 200 }),

    // DB Bridge
    checkService('db-bridge', 'http://127.0.0.1:3336/healthz'),

    // MCP Bridge
    checkService('mcp-bridge', 'http://127.0.0.1:3334/healthz'),

    // External APIs
    checkService('intervals-api', 'https://intervals.icu/api/v1/athlete', {
      'Authorization': `Bearer ${process.env.INTERVALS_ACCESS_TOKEN || 'dummy'}`
    })
  ]);

  const allOk = checks.every(check => check.status === 'ok');
  const statusCode = allOk ? 200 : 503;

  res.status(statusCode).json({
    status: allOk ? 'healthy' : 'unhealthy',
    timestamp: new Date().toISOString(),
    services: checks,
    version: '1.0.0'
  });
}

module.exports = aggregatedHealthz;
EOF

# 2. –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª gateway
echo "–û–±–Ω–æ–≤–ª—è—é server.js gateway..."

# –°–æ–∑–¥–∞–µ–º backup
cp /opt/stas-auth-gateway/server.js /opt/stas-auth-gateway/server.js.backup

# –î–æ–±–∞–≤–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π healthz
sed -i '/const express = require('\''express'\'');/a const aggregatedHealthz = require('\''./gateway-healthz'\'');' /opt/stas-auth-gateway/server.js

# –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç
sed -i '/app.get('\''\/gw\/healthz'\'', (req, res) => {/a app.get('\''\/healthz'\'', aggregatedHealthz);' /opt/stas-auth-gateway/server.js

# 3. –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª healthz
cp /tmp/gateway-healthz.js /opt/stas-auth-gateway/gateway-healthz.js

# 4. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º gateway
echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é stas-auth-gateway..."
systemctl restart stas-auth-gateway

# 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º
echo "–ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–π /healthz..."
sleep 2
curl -s http://127.0.0.1:3337/healthz | head -20

echo "‚úÖ –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π /healthz –¥–æ–±–∞–≤–ª–µ–Ω!"
echo "–¢–µ–ø–µ—Ä—å https://intervals.stas.run/healthz –ø–æ–∫–∞–∂–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
