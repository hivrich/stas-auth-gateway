{
  "openapi": "3.1.0",
  "info": {
    "title": "Intervals/STAS Gateway API",
    "description": "OAuth-protected gateway for STAS DB and Intervals.icu (proxies STAS and ICU; resolves user_id from the access token). Do NOT pass user_id â€” the gateway injects it server-side.",
    "version": "1.0.0"
  },
  "servers": [
    { "url": "https://intervals.stas.run" }
  ],
  "security": [
    { "oauth2": ["read:me", "icu", "workouts:write"] }
  ],
  "paths": {
    "/gw/healthz": {
      "get": {
        "summary": "Gateway health",
        "operationId": "getHealth",
        "responses": {
          "200": {
            "description": "Health JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": { "type": "boolean" },
                    "sts": { "type": "string" },
                    "ts": { "type": "string", "format": "date-time" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/me": {
      "get": {
        "summary": "Resolve current user",
        "description": "Returns STAS user_id and Intervals athlete_id associated with the access token.",
        "operationId": "getMe",
        "responses": {
          "200": {
            "description": "Current user mapping",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Me" }
              }
            }
          },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/api/db/user_summary": {
      "get": {
        "summary": "User summary (from STAS DB)",
        "description": "Returns user.user_summary JSON for the current token's user_id. user_id is inferred from the token.",
        "operationId": "getUserSummary",
        "responses": {
          "200": {
            "description": "User summary data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserSummary" }
              }
            }
          },
          "404": { "description": "User not found in STAS DB" }
        }
      }
    },
    "/api/db/trainings": {
      "get": {
        "summary": "Completed trainings (from STAS DB)",
        "description": "Returns completed training sessions for the current user from STAS DB.",
        "operationId": "getUserTrainings",
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 180, "default": 30 },
            "description": "Number of days back to include (default 30)."
          }
        ],
        "responses": {
          "200": {
            "description": "Training sessions list",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TrainingList" }
              }
            }
          }
        }
      }
    },
    "/icu/events": {
      "get": {
        "summary": "Planned workouts (Intervals.icu)",
        "description": "Returns planned workouts for the current user. Use oldest/newest or days (default 60).",
        "operationId": "getPlannedWorkouts",
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 180, "default": 60 },
            "description": "Number of days from today (default 60)."
          },
          {
            "name": "oldest",
            "in": "query",
            "schema": { "type": "string", "format": "date" },
            "description": "Oldest date (YYYY-MM-DD)."
          }
        ],
        "responses": {
          "200": {
            "description": "Planned workouts",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/IcuEventList" }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete events by external_id or prefix",
        "description": "Deletes Intervals.icu events for the current user. Use dry_run=true to preview.",
        "operationId": "deleteIcuEvents",
        "parameters": [
          {
            "name": "external_id",
            "in": "query",
            "schema": { "type": "string" },
            "description": "Delete a single event by external_id."
          },
          {
            "name": "external_id_prefix",
            "in": "query",
            "schema": { "type": "string" },
            "description": "Delete all events with this prefix (e.g., plan:)."
          },
          {
            "name": "dry_run",
            "in": "query",
            "schema": { "type": "boolean", "default": true },
            "description": "If true, returns what would be deleted."
          }
        ],
        "responses": {
          "200": {
            "description": "Delete result (or dry-run preview)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/IcuDeleteResult" }
              }
            }
          }
        }
      }
    },
    "/icu/events/bulk": {
      "post": {
        "summary": "Create/update planned workouts (bulk)",
        "description": "Bulk create/update Intervals.icu events for the current user. Always set external_id_prefix=plan: for safe re-uploading.",
        "operationId": "createPlannedWorkouts",
        "parameters": [
          {
            "name": "external_id_prefix",
            "in": "query",
            "schema": { "type": "string", "default": "plan:" },
            "description": "Prefix to apply to all events' external_id."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/IcuEventBulkRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk write result",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/IcuBulkWriteResult" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://intervals.stas.run/gw/oauth/authorize",
            "tokenUrl": "https://intervals.stas.run/gw/oauth/token",
            "scopes": {
              "read:me": "Read current user mapping",
              "icu": "Access Intervals.icu proxies",
              "workouts:write": "Create/update/delete workouts"
            }
          }
        }
      }
    },
    "schemas": {
      "Me": {
        "type": "object",
        "properties": {
          "user_id": { "type": "integer", "example": 95192039 },
          "athlete_id": { "type": "string", "example": "i297087" }
        },
        "required": ["user_id", "athlete_id"]
      },
      "UserSummary": {
        "type": "object",
        "properties": {
          "ok": { "type": "boolean" },
          "user_summary": { "type": "object", "description": "Arbitrary JSON payload from STAS user.user_summary." }
        },
        "required": ["ok"]
      },
      "TrainingList": {
        "type": "object",
        "properties": {
          "ok": { "type": "boolean" },
          "trainings": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "date": { "type": "string", "format": "date-time" },
                "workout_type": { "type": "string" },
                "distance": { "type": "string" },
                "training_load": { "type": "number" }
              }
            }
          },
          "count": { "type": "integer" }
        },
        "required": ["ok", "trainings", "count"]
      },
      "IcuEvent": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "external_id": { "type": "string", "description": "Should include the chosen prefix" },
          "category": { "type": "string", "enum": ["WORKOUT", "EVENT", "NOTE"] },
          "type": { "type": "string", "example": "RUN" },
          "name": { "type": "string" },
          "start_date": { "type": "string", "format": "date-time" },
          "description": { "type": "string" }
        },
        "required": ["category", "type", "name", "start_date"]
      },
      "IcuEventList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/IcuEvent" }
      },
      "IcuEventBulkRequest": {
        "type": "object",
        "properties": {
          "workouts": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/IcuEvent" },
            "minItems": 1
          }
        },
        "required": ["workouts"]
      },
      "IcuBulkWriteResult": {
        "type": "object",
        "properties": {
          "ok": { "type": "boolean" },
          "received": { "type": "integer" },
          "created": { "type": "integer" },
          "updated": { "type": "integer" }
        },
        "required": ["ok", "received"]
      },
      "IcuDeleteResult": {
        "type": "object",
        "properties": {
          "ok": { "type": "boolean" },
          "deleted": { "type": "integer" },
          "matched": { "type": "integer" }
        },
        "required": ["ok"]
      }
    }
  }
}
