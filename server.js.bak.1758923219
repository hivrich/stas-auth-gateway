const express    = require('express');
const bodyParser = require('body-parser');

const bearerUid   = require('./routes/_bearer_uid');     const legacyAliases = require('./routes/legacy_aliases');
require("./routes/icu_post_real_gw")(app);
const trainingsRouter = require('./routes/trainings');
// из Bearer → req.query.user_id
const uidInjectDb = require('./routes/_uid_inject_db');  // совместимость для DB-прокси
const dbProxy     = require('./routes/db_proxy');        // прокси к stas-db-bridge
const stas        = require('./routes/stas');            // алиасы DB API
const icu         = require('./routes/icu');             // ICU proxy
const openapi     = require('./routes/openapi');
const oauth       = require('./routes/oauth');

const PORT = process.env.PORT || 3337;
const app  = express();
const oauthPage = require("./middleware/oauth_page");
app.use("/gw/oauth", oauthPage());
const cookieParser = require("cookie-parser");
app.use(cookieParser());

app.set('trust proxy', 1);
app.use(bodyParser.json({ limit: '256kb' }));
app.use(express.urlencoded({ extended: false }));

// Health
app.get('/gw/healthz', (_req, res) => res.json({ ok: true, ts: new Date().toISOString() }));

// OpenAPI & OAuth stubs
app.use('/gw', bearerUid());
app.use('/gw', trainingsRouter);


app.use('/gw', oauth);

// Глобально для всех /gw/* — требуем Bearer и проставляем user_id
app.use('/gw', legacyAliases);

// DB API
app.use('/gw/api/db', uidInjectDb);
app.use('/gw/api/db', dbProxy);
app.use('/gw/api', stas);

// ICU proxy (уже есть req.query.user_id от bearerUid)
/* === AUTOPATCH (begin) — attach exact POST /gw/icu/events BEFORE proxy === */
try {
  const attachIcuPostExact = require("./lib/icu_post_exact");
  if (typeof attachIcuPostExact === "function") attachIcuPostExact(app);
  else console.error("[icu][POST] attach function missing");
} catch(e) { console.error("[icu][POST] attach failed:", e && e.message); }
/* === AUTOPATCH (end) === */
/* === AUTOPATCH DELETE (before proxy) === */
try { const attachDelete = require("./lib/attach_delete"); if (typeof attachDelete === "function") attachDelete(app); }
catch(e){ console.error("[icu][DELETE] attach failed:", e && e.message); }
/* === AUTOPATCH DELETE end === */
/* === AUTOPATCH POST exact attach BEFORE proxy === */
try { const attachPost = require("./lib/attach_post"); if (typeof attachPost === "function") attachPost(app); }
catch(e){ console.error("[icu][POST] attach failed:", e && e.message); }
/* === AUTOPATCH POST end === */
app.use('/gw/icu', icu);

// 404/500

app.use('/gw', openapi);
app.use((req, res) => res.status(404).json({ error: 'not_found', path: req.path }));
app.use((err, _req, res, _next) => {
  console.error('[ERR]', err && err.stack || err);
  res.status(500).json({ error: 'internal_error' });
});

app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
/* === AUTOPATCH: attach POST /gw/icu/events (dry_run) === */
try {
  const attachIcuPostDryRun = require('./lib/icu_post_dryrun');
  if (typeof attachIcuPostDryRun === 'function') {
    attachIcuPostDryRun(app);
    console.log('[icu][POST] /gw/icu/events (dry_run) attached');
  }
} catch (e) {
  console.error('[icu][POST] attach failed:', e && e.message);
}
