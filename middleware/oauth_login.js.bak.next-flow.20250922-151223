const express = require('express');

// base64url для Bearer t_<payload>
function b64url(s) {
  return Buffer.from(s).toString('base64').replace(/\+/g,'-').replace(/\//g,'_').replace(/=+$/,'');
}

function renderPage(qs, errMsg) {
  // action пустой: POST пойдёт на тот же /gw/oauth/authorize с исходными query
  const error = errMsg ? `<div style="color:#dc2626;font-size:12px;margin-top:6px">${errMsg}</div>` : '';
  return `<!doctype html>
<html lang="ru"><head>
<meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>STAS — Вход</title>
<style>
*{box-sizing:border-box}
body{margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Arial,sans-serif;background:#f8f9fa;color:#003330}
.wrap{min-height:100dvh;display:flex;align-items:center;justify-content:center;padding:16px}
.card{width:100%;max-width:400px}
.avatar{width:96px;height:96px;border-radius:9999px;overflow:hidden;margin:0 auto 16px}
h1{margin:0 0 8px 0;color:#6b7280;font-size:16px;font-weight:500;text-align:center;letter-spacing:.02em}
.input{width:100%;height:48px;border:1.75px solid #2563eb33;border-radius:12px;background:#fff;padding:0 16px;color:#003330;font-size:16px;outline:none}
.input:focus{border-color:#2563eb}
.btn{width:100%;height:56px;border:0;border-radius:12px;background:#00f9de;color:#003330;font-weight:600;cursor:pointer;font-size:18px}
.btn:hover{background:#00e6cb}
.mt-3{margin-top:12px}.mt-4{margin-top:16px}.center{text-align:center}
.muted{color:#b9bbbb;font-size:12px}
a{color:inherit}
</style>
</head>
<body>
<div class="wrap"><div class="card">
  <div class="avatar">
    <img alt="STAS Profile" src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Frame%2056-GrnXAETxJu1Yb83h8yanH4qnZOTDp6.png" style="width:100%;height:100%;object-fit:cover"/>
  </div>
  <h1>ВВЕДИТЕ ВАШ STAS ID</h1>
  <form method="post" novalidate>
    <input name="user_id" type="text" inputmode="numeric" pattern="[0-9]*" class="input" placeholder="" aria-label="STAS ID"/>
    ${error}
    <div class="mt-3"><button class="btn" type="submit">Войти</button></div>
  </form>
  <div class="center mt-4"><p class="muted">Подробнее: <a class="muted" href="https://stas.run" target="_blank" rel="noreferrer">stas.run</a></p></div>
</div></div>
</body></html>`;
}

module.exports = function oauthLogin() {
  const r = express.Router();

  // 0) Если есть STAS_BEARER в cookie — прокидываем в Authorization
  r.use((req,res,next)=>{
    const bearer = req.cookies?.STAS_BEARER;
    if (bearer && !req.headers.authorization) {
      req.headers.authorization = `Bearer ${bearer}`;
    }
    next();
  });

  // 1) GET /authorize — форма ТОЛЬКО если нет code/error И нет Bearer/cookie
  r.get('/authorize', (req,res,next)=>{
    const hasAuth = (req.headers.authorization||'').startsWith('Bearer ');
    if (hasAuth || 'code' in req.query || 'error' in req.query) return next();
    res.setHeader('Cache-Control','no-store, no-cache, must-revalidate');
    res.setHeader('Pragma','no-cache');
    res.setHeader('Expires','0');
    res.setHeader('Content-Type','text/html; charset=utf-8');
    res.status(200).send(renderPage(req.query, null));
  });

  // 2) POST /authorize — принимаем uid, кладём Bearer в куку, редиректим обратно
  r.post('/authorize', express.urlencoded({extended:false}), (req,res)=>{
    const raw = String(((req.body && (req.body.user_id || req.body.uid)) || "")).trim();
    const cleaned = raw.replace(/\D+/g,'');
    if (!cleaned || cleaned.length < 3) {
      res.setHeader('Cache-Control','no-store, no-cache, must-revalidate');
      res.setHeader('Pragma','no-cache');
      res.setHeader('Expires','0');
      res.setHeader('Content-Type','text/html; charset=utf-8');
      return res.status(400).send(renderPage(req.query, 'ID должен содержать только цифры и быть не короче 3 символов'));
    }
    const token = `t_${b64url(JSON.stringify({ uid: cleaned }))}`;
    // куки на /gw, чтобы видеть и /gw/oauth/*
    res.cookie('STAS_BEARER', token, { httpOnly:true, sameSite:'lax', path:'/gw', maxAge:7*24*60*60*1000 });
    res.cookie('STAS_UID', cleaned,   { httpOnly:true, sameSite:'lax', path:'/gw', maxAge:7*24*60*60*1000 });
    const qs = new URLSearchParams(req.query).toString();
    res.redirect(`/gw/oauth/authorize${qs ? ('?'+qs) : ''}`);
  });

  return r;
};
