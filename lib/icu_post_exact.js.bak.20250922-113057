const express = require('express');

function parseBearerUid(req) {
  const h = req.get('authorization') || '';
  const m = h.match(/^\s*Bearer\s+t_([A-Za-z0-9\-_]+)\s*$/i);
  if (!m) throw Object.assign(new Error('missing_or_invalid_token'), { status: 401 });
  const b64 = m[1].replace(/-/g, '+').replace(/_/g, '/');
  const pad = b64.length % 4 ? '='.repeat(4 - (b64.length % 4)) : '';
  let obj;
  try { obj = JSON.parse(Buffer.from(b64 + pad, 'base64').toString('utf8')); }
  catch { throw Object.assign(new Error('invalid_token_payload'), { status: 401 }); }
  const uid = obj && String(obj.uid || '').trim();
  if (!uid || !/^\d+$/.test(uid)) throw Object.assign(new Error('missing_user_id'), { status: 401 });
  return uid;
}

function slugify(s){return String(s||'').toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/^-+|-+$/g,'').slice(0,48)}

function normalizeEvents(events, prefix='plan:'){
  return events.map(ev=>{
    const e={...ev};
    e.category=e.category||'WORKOUT';
    if(!e.external_id){
      const dt=String(e.start_date_local||'').split('T')[0]||'date';
      e.external_id=`${prefix}${dt}-${slugify(e.name||e.type||'workout')}`.slice(0,80);
    }
    return e;
  });
}

module.exports = function attachIcuPostExact(app) {
  // ВАЖНО: точный маршрут ДО общего app.use('/gw/icu', ...)
  app.post('/gw/icu/events', express.json({ limit: '256kb' }), (req, res) => {
    try {
      const uid = parseBearerUid(req); void uid; // uid берём, но здесь не используем (dry_run)
      const prefix = (req.query.external_id_prefix || 'plan:') + '';
      const dryRun = String(req.query.dry_run || 'true').toLowerCase() === 'true';
      if (!req.body || !Array.isArray(req.body.events) || req.body.events.length < 1) {
        return res.status(400).json({ error: 'bad_request', message: 'body.events[] is required' });
      }
      const normalized = normalizeEvents(req.body.events, prefix);
      if (dryRun) return res.json({ ok:true, dry_run:true, count: normalized.length, events: normalized });
      // Боевую запись добавим отдельным шагом.
      return res.status(501).json({ error:'not_implemented', message:'ICU write is not enabled yet' });
    } catch(e) {
      const code = e.status || 500;
      return res.status(code).json({ error: e.message || 'internal_error' });
    }
  });
  console.log('[icu][POST] exact /gw/icu/events attached BEFORE proxy');
};
