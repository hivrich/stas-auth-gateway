/**
 * Bearer parser middleware.
 * Требует Authorization: Bearer t_<base64url>{"uid":"<user_id>"}.
 * Удаляет входящий ?user_id и принудительно проставляет user_id из токена.
 */
module.exports = function () {
  return function (req, res, next) {
    try {
      const auth = String(req.headers['authorization'] || '');
      if (!auth.startsWith('Bearer ')) {
        res.status(401).json({ status: 401, error: 'missing_or_invalid_token' });
        return;
      }
      const tok = auth.slice(7).trim();
      if (!tok.startsWith('t_')) {
        res.status(401).json({ status: 401, error: 'missing_or_invalid_token' });
        return;
      }
      const b64 = tok.slice(2);
      const json = Buffer.from(b64.replace(/-/g, '+').replace(/_/g, '/'), 'base64').toString('utf8');
      let uid = null;
      try { uid = JSON.parse(json).uid; } catch (e) {}
      if (!uid || !/^[0-9]+$/.test(String(uid))) {
        res.status(401).json({ status: 401, error: 'missing_or_invalid_token' });
        return;
      }
      // Жёстко игнорируем входящий ?user_id со стороны клиента:
      if (req.query && Object.prototype.hasOwnProperty.call(req.query, 'user_id')) {
        delete req.query.user_id;
      }
      req.query = Object.assign({}, req.query, { user_id: String(uid) });
      req.user_id = String(uid);
      req.headers['x-user-id'] = String(uid);
      next();
    } catch (e) {
      res.status(401).json({ status: 401, error: 'missing_or_invalid_token' });
    }
  };
};
