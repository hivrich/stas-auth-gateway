const { Router } = require('express');
const { URL } = require('url');
const https = require('https');
const credsDao = require('../credsDao');

const ICU_BASE = process.env.ICU_API_BASE_URL || 'https://intervals.icu/api/v1';
const r = Router();

function decodeBearerUid(req){
  try{
    const h = String((req.headers && (req.headers.authorization || req.headers.Authorization)) || '');
    const m = h.match(/Bearer\s+t_([A-Za-z0-9_-]+)/);
    if(!m) return null;
    const b64 = m[1].replace(/-/g,'+').replace(/_/g,'/');
    const buf = Buffer.from(b64, 'base64');
    const obj = JSON.parse(buf.toString('utf8'));
    return obj && String(obj.uid || '');
  }catch(_e){ return null; }
}

async function icuGet(url, apiKey){
  const u = new URL(url);
  const opts = {
    protocol: u.protocol,
    hostname: u.hostname,
    port: u.port || 443,
    path: u.pathname + u.search,
    method: 'GET',
    headers: {
      'X-API-Key': apiKey,
      'Accept': 'application/json',
      'User-Agent': 'curl/7.88.1',
      'Connection': 'close',
      'Host': u.hostname
    }
  };
  return await new Promise((resolve) => {
    const req = https.request(opts, (resp) => {
      const chunks = [];
      resp.on('data', c => chunks.push(c));
      resp.on('end', () => {
        const text = Buffer.concat(chunks).toString('utf8');
        resolve({ status: resp.statusCode, statusText: resp.statusMessage, headers: resp.headers, text });
      });
    });
    req.on('error', e => resolve({ err: String(e && (e.message||e)) }));
    req.end();
  });
}

r.get('/icu/plan', async (req, res) => {
  res.set('X-Route','icu_plan_fix');
  try {
    const q = req.query || {};
    const uid_q = q.user_id ? String(q.user_id) : '';
    const uid_r = req.user_id ? String(req.user_id) : '';
    const uid_h = String(req.headers['x-user-id'] || req.headers['X-User-Id'] || '');
    const uid_b = decodeBearerUid(req) || '';
    const user_id = uid_q || uid_r || uid_h || uid_b || '';
    const oldest = String(q.oldest || '').trim();
    const newest = String(q.newest || '').trim();

    console.log('[icu_plan_fix][HIT]', { uid_q, uid_r, uid_h, uid_b, user_id, oldest, newest });

    if (!user_id || !oldest || !newest) {
      console.log('[icu_plan_fix][SKIP]', { no_uid: !user_id, no_range: !oldest || !newest });
      return res.json([]);
    }

    const creds = await credsDao.getByUserId(user_id);
    const apiKey  = creds && (creds.api_key || creds.icu_api_key);
    const athlete = creds && (creds.athlete_id || creds.icu_athlete_id);
    console.log('[icu_plan_fix][CREDS]', { have: !!creds, athlete, api_key_len: apiKey ? String(apiKey).length : 0 });
    if (!apiKey || !athlete) return res.json([]);

    const url = `${ICU_BASE}/athlete/${encodeURIComponent(athlete)}/events?oldest=${encodeURIComponent(oldest)}&newest=${encodeURIComponent(newest)}`;
    const rr = await icuGet(url, apiKey);
    if (rr.err) {
      console.error('[icu_plan_fix][HTTPS_ERR]', rr.err);
      return res.json([]);
    }
    console.log('[icu_plan_fix][FETCH]', rr.status, rr.statusText, url);
    if (String(rr.status) !== '200') {
      console.error('[icu_plan_fix][BODY]', (rr.text || '').slice(0, 400));
      return res.json([]);
    }

    let data;
    try { data = JSON.parse(rr.text); }
    catch(e){ console.error('[icu_plan_fix][JSON_ERR]', e && (e.message||e)); data = []; }

    const len = Array.isArray(data) ? data.length : 0;
    console.log('[icu_plan_fix][DATA] length', len);
    return res.json(Array.isArray(data) ? data : []);
  } catch (e) {
    console.error('[icu_plan_fix][ERR]', e && (e.stack||e));
    return res.json([]);
  }
});

r.get('/icu/plan/_probe', async (req,res)=>{
  res.set('X-Route','icu_plan_fix');
  try{
    const q = req.query || {};
    const uid = decodeBearerUid(req) || req.user_id || q.user_id || '';
    const creds = uid ? await credsDao.getByUserId(String(uid)) : null;
    const athlete = creds && (creds.athlete_id || creds.icu_athlete_id);
    const apiKey  = creds && (creds.api_key || creds.icu_api_key);
    const oldest = String(q.oldest || '');
    const newest = String(q.newest || '');
    const icu_url = (athlete && oldest && newest)
      ? `${ICU_BASE}/athlete/${encodeURIComponent(athlete)}/events?oldest=${encodeURIComponent(oldest)}&newest=${encodeURIComponent(newest)}`
      : null;
    res.json({
      ok:true,
      user_id: String(uid || ''),
      oldest, newest,
      have_creds: !!(apiKey && athlete),
      athlete_id: athlete || null,
      api_key_len: apiKey ? String(apiKey).length : 0,
      icu_url
    });
  }catch(e){
    console.error('[icu_plan_fix][_probe][ERR]', e && (e.stack||e));
    res.status(500).json({ok:false,error:'internal_error'});
  }
});

module.exports = r;
