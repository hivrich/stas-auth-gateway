const express = require('express');
const router = express.Router();

const STAS_BASE = process.env.STAS_BASE || 'http://127.0.0.1:3336';
const STAS_KEY  = process.env.STAS_KEY  ;

function uidFromBearer(req){
  const auth = String(req.headers['authorization'] || '');
  const m = auth.match(/^Bearer\s+t_([A-Za-z0-9\-_]+)$/);
  if(!m) return null;
  try{
    const b64 = m[1].replace(/-/g,'+').replace(/_/g,'/');
    const json = JSON.parse(Buffer.from(b64,'base64').toString('utf8'));
    return json && json.uid ? String(json.uid) : null;
  }catch(_e){ return null; }
}

async function proxyOnce(pathname, req){
  const url  = new URL(pathname, STAS_BASE);
  const params = new URLSearchParams(req.query || {});
  let u = params.get('user_id');
  if (!u || u === '0') {
    const fromBearer = uidFromBearer(req);
    if (!fromBearer) return { early: { status:401, body: JSON.stringify({status:401,error:'missing_or_invalid_token'}), source: 'early-401' } };
    params.set('user_id', fromBearer);
  }
  for (const [k,v] of params.entries()) url.searchParams.set(k,v);

  const r = await fetch(url, { headers: { 'X-API-Key': STAS_KEY, 'Accept': 'application/json' }});
  const body = await r.text();
  return { r, body, url: String(url) };
}

router.use(async (req, res) => {
  const rest = req.path.replace(/^\/+/, '');
  const candidates = [`/api/db/${rest}`];
  if (rest === 'activities') {
    candidates.push('/api/db/activities_full', '/api/db/trainings');
  }

  for (const path of candidates) {
    const attempt = await proxyOnce(path, req);
    if (attempt.early) {
      return res.status(attempt.early.status)
        .set('X-Gateway-Source', attempt.early.source)
        .type('application/json').send(attempt.early.body);
    }
    const { r, body, url } = attempt;
    console.log('[db_proxy]', req.method, url, '→', r.status);
    if (r.status !== 404 || path === candidates[candidates.length-1]) {
      return res.status(r.status)
        .set('X-Gateway-Source', path) // показываем, что именно отрабатывало
        .set('content-type', r.headers.get('content-type') || 'application/json')
        .send(body);
    }
    // иначе 404 — пробуем следующий path
  }
  return res.status(404).set('X-Gateway-Source','no-candidates').json({ error: 'Not Found' });
});

module.exports = router;
