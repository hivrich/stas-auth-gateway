const express = require('express');
const r = express.Router();
const { getCreds2 } = require('../credsDao');

const ICU_BASE = process.env.ICU_API_BASE_URL || 'https://intervals.icu/api/v1';

function pickUid(req){
  // auth мидлварь обычно кладёт user_id/uid сюда
  if (req.auth && (req.auth.user_id || req.auth.uid)) return String(req.auth.user_id || req.auth.uid);
  // запасные пути (если вдруг)
  if (req.query && (req.query.user_id || req.query.uid)) return String(req.query.user_id || req.query.uid);
  if (req.headers['x-user-id']) return String(req.headers['x-user-id']);
  return null;
}

r.get('/icu/plan', async (req, res) => {
  res.set('X-Route','icu_plan_fix');
  try {
    const oldest = String(req.query.oldest || '').trim();
    const newest = String(req.query.newest || '').trim();
    const uid    = pickUid(req);

    if (!uid || !oldest || !newest) {
      res.set('X-ICU-Status', 'skip-no-uid-or-range');
      return res.json([]);
    }

    const creds = await getCreds2(uid).catch(()=>null);
    const apiKey  = creds && (creds.api_key);
    const athlete = creds && (creds.athlete_id);

    if (!apiKey || !athlete) {
      res.set('X-ICU-Status', 'skip-no-creds');
      return res.json([]);
    }

    const url = `${ICU_BASE}/athlete/${encodeURIComponent(athlete)}/events?oldest=${encodeURIComponent(oldest)}&newest=${encodeURIComponent(newest)}`;
    const auth = 'Basic ' + Buffer.from(`API_KEY:${apiKey}`).toString('base64');

    const rr = await fetch(url, { headers: { Authorization: auth } });
    res.set('X-ICU-Status', String(rr.status));
    if (!rr.ok) {
      const body = await rr.text().catch(()=> '');
      return res.status(502).json({ ok:false, source:'icu', status: rr.status, body: (body||'').slice(0,400) });
    }

    let data = await rr.json().catch(()=> []);
    const len = Array.isArray(data) ? data.length : 0;
    res.set('X-ICU-Len', String(len));
    if (!Array.isArray(data)) data = [];
    return res.json(data);
  } catch (e) {
    console.error('[icu_plan_fix][ERR]', e && (e.stack||e));
    return res.json([]);
  }
});

// оставим _probe как есть, если он уже подключен отдельно; этот файл экспортирует router
module.exports = r;
