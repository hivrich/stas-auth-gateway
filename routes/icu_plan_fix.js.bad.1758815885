const { Router } = require('express');
const fetch = null; // disabled
const https = require('https');
const { URL } = require('url');
const credsDao = require('../credsDao');

const ICU_BASE = process.env.ICU_API_BASE_URL || 'https://intervals.icu/api/v1';
const r = Router();

function decodeBearerUid(req){
  try{
    const h = String((req.headers && (req.headers.authorization || req.headers.Authorization)) || '');
    const m = h.match(/Bearer\s+t_([A-Za-z0-9_-]+)/);
    if(!m) return null;
    const b64 = m[1].replace(/-/g,'+').replace(/_/g,'/');
    const buf = Buffer.from(b64, 'base64');
    const obj = JSON.parse(buf.toString('utf8'));
    return obj && String(obj.uid || '');
  }catch(_e){ return null; }
}

r.get('/icu/plan', async (req, res) => {
  try {
    res.set('X-Route','icu_plan_fix');

    const q = (req && req.query) || {};
    const uid_q = q && q.user_id ? String(q.user_id) : '';
    const uid_r = req && req.user_id ? String(req.user_id) : '';
    const uid_h = String((req && (req.headers['x-user-id'] || req.headers['X-User-Id'])) || '');
    const uid_b = decodeBearerUid(req) || '';
    const user_id = uid_q || uid_r || uid_h || uid_b || '';

    console.log('[icu_plan_fix][HIT]', { uid_q, uid_r, uid_h, uid_b, user_id, oldest:q.oldest, newest:q.newest });

    const oldest = String(q.oldest || '').trim();
    const newest = String(q.newest || '').trim();
    if (!user_id) { console.log('[icu_plan_fix][NO_UID]'); return res.json([]); }
    if (!oldest || !newest) { console.log('[icu_plan_fix][NO_RANGE]'); return res.json([]); }

    const creds = await credsDao.getByUserId(user_id);
    const apiKey  = creds && (creds.api_key || creds.icu_api_key);
    const athlete = creds && (creds.athlete_id || creds.icu_athlete_id);
    console.log('[icu_plan_fix][CREDS]', { have: !!creds, athlete, api_key_len: apiKey ? String(apiKey).length : 0 });
    if (!apiKey || !athlete) { console.log('[icu_plan_fix][NO_CREDS]'); return res.json([]); }

    const url = ICU_BASE + '/athlete/' + encodeURIComponent(athlete) + '/calendar?oldest=' + encodeURIComponent(oldest) + '&newest=' + encodeURIComponent(newest);
    // === begin: https.request block inserted ===
    const u = new URL(url);
    const opts = {
      protocol: u.protocol,
      hostname: u.hostname,
      port: u.port || 443,
      path: u.pathname + u.search,
      method: 'GET',
      headers: {
        'X-API-Key': apiKey,
        'Accept': 'application/json',
        'User-Agent': 'curl/7.88.1',
        'Connection': 'close',
        'Host': u.hostname
      }
    };
    const body = await new Promise((resolve) => {
      const req = https.request(opts, (resp) => {
        let chunks = [];
        resp.on('data', (c)=>chunks.push(c));
        resp.on('end', ()=> resolve({ statusCode: resp.statusCode, statusMessage: resp.statusMessage, headers: resp.headers, text: Buffer.concat(chunks).toString('utf8') }));
      });
      req.on('error', (e)=> resolve({ err: String(e && (e.message||e)) }));
      req.end();
    });
    console.log('[icu_plan_fix][FETCH] status', body && body.statusCode, body && body.statusMessage, url);
    if (!body || String(body.statusCode) !== '200') { console.error('[icu_plan_fix][BODY]', body && body.text ? body.text.slice(0,400) : ''); return res.json([]); }
    let data = []; try { data = JSON.parse(body.text); } catch(e){ console.error('[icu_plan_fix][JSON_ERR]', e && (e.message||e)); data = []; }
    console.log('[icu_plan_fix][DATA] length', Array.isArray(data)?data.length:'n/a');
    return res.json(Array.isArray(data) ? data : []);
    // === end: https.request block inserted ===
        
    const basicAuthHeader = 'Basic ' + Buffer.from('API_KEY:' + String(apiKey)).toString('base64');
    const rr = await fetch(url, { headers: { 'X-API-Key': apiKey, 'Accept':'application/json', 'User-Agent':'stas-auth-gw/2' , 'Authorization': basicAuthHeader } });
    console.log('[icu_plan_fix][FETCH] status', rr.status, rr.statusText, url);
    if (!rr.ok) { try { const txt = await rr.text(); console.error('[icu_plan_fix][BODY]', (txt||'').slice(0,400)); } catch(_e){} return res.json([]); }

    let data = [];
    try { data = await rr.json(); } catch(e){ console.error('[icu_plan_fix][JSON_ERR]', e && (e.message||e)); data = []; }
    const len = Array.isArray(data) ? data.length : 0;
    console.log('[icu_plan_fix][DATA] length', len);
    return res.json(Array.isArray(data) ? data : []);
  } catch (e) {
    console.error('[icu_plan_fix][ERR]', e && (e.stack||e));
    try{ res.set('X-Route','icu_plan_fix'); }catch(_e){}
    return res.json([]);
  }
});

r.get('/icu/plan/_probe', async (req,res)=>{
  try{
    res.set('X-Route','icu_plan_fix');
    const q = (req && req.query) || {};
    const uid = decodeBearerUid(req) || req.user_id || q.user_id || '';
    const creds = uid ? await credsDao.getByUserId(String(uid)) : null;
    const athlete = creds && (creds.athlete_id || creds.icu_athlete_id);
    const apiKey  = creds && (creds.api_key || creds.icu_api_key);
    const oldest = String(q.oldest || '');
    const newest = String(q.newest || '');
    const icu_url = (athlete && oldest && newest)
      ? ICU_BASE + '/athlete/' + encodeURIComponent(athlete) + '/calendar?oldest=' + encodeURIComponent(oldest) + '&newest=' + encodeURIComponent(newest)
      : null;
    res.json({
      ok:true,
      user_id: String(uid || ''),
      oldest, newest,
      have_creds: !!(apiKey && athlete),
      athlete_id: athlete || null,
      api_key_len: apiKey ? String(apiKey).length : 0,
      icu_url
    });
  }catch(e){
    console.error('[icu_plan_fix][_probe][ERR]', e && (e.stack||e));
    res.status(500).json({ok:false,error:'internal_error'});
  }
});

module.exports = r;
